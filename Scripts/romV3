#!/bin/bash
# ----------------------------------
#  variables
# ----------------------------------
EDITOR=vim
PASSWD=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'
#---------------
# Credits
#---------------
# akhilnarang
# nathanchance
#---------------

#-------------------------------------------------
#TO DO / ADD / Notes
    #Add install/update dependiencies option
    #Other
    #Python: Only needed for Arch
    #Python3.3: pyvenv venv
    #Python3.0: python3.6 -m venv
    #Python2.0: virtualenv2 venv
    #Activate Python: source venv/bin/activate
    #[Neofetch] super awesome system info script
    #Install for Ubuntu: sudo apt install neofetch
    #Install for Arch: yaourt -S neofetch
     #gnome-terminal -e "watch -n1 -d ccache -s"
        #tilix -q -e "watch -n1 -d ccache -s"
        #tilix -q -e "climate overview"
        #sudo pacman -Sy python2-virtualenv
        #virtualenv2 venv
#---------------------------------------------------

# ----------------------------------
# User defined function
# ----------------------------------

pause(){
  read -p "Press [Enter] key to continue..." fackEnterKey
}

pause0(){
    read -p "                        Press [Enter] key to continue..." fackEnterKey
}

# function to display menus

function show_menus() {
    clear
    echo ""
    tput setaf 1
    echo "Lets Get ROM'd Up!" && sleep 2
    tput setaf 2
    clear
    echo ""
    echo "   ROM Builder  "
    echo " [KillerDroid96]"
    echo ""
    echo "================="
    echo "|   Main Menu   |"
    echo "================="
    echo "| [1] Setup     |"
    echo "| [2] Build     |"
    echo "| [3] Clean     |"
    echo "| [e] Exit      |"
    echo "================="
    echo ""
}
read_options(){
    local choice
    read -p "Enter choice:" choice
    case $choice in
        1) Setup ;;
        2) Build ;;
        3) Clean ;;
        e) exit 0;; 
        *) echo -e "${RED}Error...${STD}" && sleep 2
    esac
}
Build(){
    show_menus(){
    clear
    echo "============="
    echo "|    ROM    |"
    echo "============="
    echo "| [1] Clean |"
    echo "| [2] Dirty |"
    echo "| [e] Exit  |"
    echo "============="
}
read_options(){
    local choice
    tput setaf 7; read -p "Enter choice [ 1 - 3] " choice
    case $choice in
        1) Clean ;;
        2) Dirty ;;
        e) exit 0 ;;
        *) echo -e "${RED}Error...${STD}" && sleep 2
    esac
}
Clean(){
        tput setaf 2; echo "Getting Things Ready"
        tput setaf 7;
        virtualenv2 venv
        source venv/bin/activate
        export LC_ALL=C
        tput setaf 1; echo "Removing Entire Build Directory!" && sleep 3
        tput setaf 7;
        make clobber
        make clean
        tput setaf 2; echo "Syncing Repo!" && sleep 2
        time repo sync --force-sync --no-clone-bundle
        tput setaf 1; echo "Building ROM for Nexus6P!" && sleep 3
        tput setaf 2
        . build/envsetup.sh 
        brunch angler
        pause
        return
}
Dirty(){
        tput setaf 2; echo "Building Dirty Nexus 6P ROM"
        tput setaf 7;
        source venv/bin/activate
        export LC_ALL=C
        make dirty
        time repo sync --force-broken --force-sync --no-clone-bundle 
        . build/envsetup.sh
        tput setaf 1; echo "Building ROM!" && sleep 3 
        tput setaf 2
        brunch angler
        pause
        return
}
}

Setup(){
    show_menus() {
    clear
    tput setaf 2
    echo "============================"    
    echo "|          Setup           |"
    echo "============================"
    echo "| [1] Install Dependencies |"
    echo "| [2] Setup Google Source  |"
    echo "| [3] Create ROM Directory |" 
    echo "| [4] Initialize Repo      |"
    echo "| [5] Setup CCache         |"
    echo "| [e] Exit                 |"
    echo "============================"
}
read_options(){
    local choice
    tput setaf 7; read -p "Enter choice [ 1 - 6] " choice
    case $choice in
        1) Install_Dependencies ;;
        2) Setup_Google_Source ;;
        3) Create_ROM_Directory ;;
        4) Initialize_Repo ;;
        5) Setup_CCache ;;
        e) exit 0;;
        *) echo -e "${RED}Error...${STD}" && sleep 2
    esac
}
Install_Dependencies(){
    show_menus(){
    clear
    tput setaf 2
    echo "=================="
    echo "|  Dependencies  |"
    echo "=================="
    echo "| [1] Arch       |"
    echo "| [2] Ubuntu     |"
    echo "| [3] Exit       |" 
    echo "=================="
}
read_options(){
    local choice
    tput setaf 7; read -p "Enter choice [ 1 - 3] " choice
    case $choice in
        1) Arch ;;
        2) Ubuntu ;;
        e) exit 0;;
        *) echo -e "${RED}Error...${STD}" && sleep 2
    esac
}
Arch(){
        tput setaf 1; echo "Installing Dependencies for Arch"
        tput setaf 3; echo "Gettings Things Ready"
        tput setaf 2; sudo pacman -Syu
        tput setaf 3; echo "Installing Android Dependencies" && sleep 3
        tput setaf 2; sudo pacman -S  git gnupg flex bison gperf sdl wxgtk2 bash-completion \
        squashfs-tools curl ncurses zlib schedtool perl-switch zip \
        unzip libxslt python2-virtualenv bc rsync  \
        xml2 lzop pngcrush imagemagick jdk8-openjdk  jdk9-openjdk repo android-tools python-networkx 
        tput setaf 3; echo "Installing 64 bit Dependencies" && sleep 3
        tput setaf 2; sudo pacman -S ncurses5-compat-libs lib32-ncurses5-compat-libs lib32-zlib lib32-ncurses lib32-readline
        tput setaf 3; echo "Installing Extra Dependencies" && sleep 3
        tput setaf 2; sudo pacman -S ca-certificates-mozilla fakeroot make pkg-config maven tmux screen w3m ncftp yaourt
        tput setaf 2; yaourt -S neofetch aur/tilix 
        tput setaf 3; echo "Check & Reinstall Dependencies " && sleep 3
        tput setaf 2; sudo pacman -S base-devel
        tput setaf 3; echo "Disable PGP checking from AUR" && sleep 3
        export MAKEPKG="makepkg --skippgpcheck"
        tput setaf 2;
        yaourt -S libtinfo --noconfirm
        yaourt -S lib32-ncurses5-compat-libs --noconfirm
        yaourt -S ncurses5-compat-libs --noconfirm
        pause
        return
}
Ubuntu(){
         echo "Installing Dependencies for Ubuntu"
         sudo apt install neofetch tilix
         pause
         return
}
}
Setup_Google_Source(){
    echo "Setting up Google Source"
    mkdir ~/bin
    PATH=~/bin:$PATH
    curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
    chmod a+x ~/bin/repo
    pause
    return
}
Create_ROM_Directory(){
    echo "Creating ROM Directory:"
    echo "mkdir ~/ROM-Directory"
    pause
    mkdir ~/ROM-Directory
    pause
    return
}
Initialize_Repo(){
    echo "Initialize Repo:"
    echo "cd ~/ROM-Directory"
    pause
    cd ~/ROM-Directory
    echo "Example: repo init -u https://github.com/username/platform_manifest.git -b branch"
    pause
    echo "Initializing DirtyUnicorns"
    pause
    repo init -u https://github.com/DirtyUnicorns/android_manifest -b o8x
    return
}
Setup_CCache(){
    echo "export USE_CCACHE=1" >> ~/.bashrc
    echo "~/ROM-Directory/prebuilts/misc/linux-x86/ccache/ccache -M 60G"
    pause
    return
}
}
Clean(){
    show_menus() {
    clear
    tput setaf 2
    #Commit: Add our useful clean options
    #https://github.com/KillerDroid96/android_build/commit/39f388d5daa5555526725739a0fd1e6c3d4e2333#diff-45ae4b2bc9657458b6b7f036143eba8a
    echo "======================="
    echo "|  Advanced Cleaning  |"
    echo "======================="
    echo "| [1]  Clean          |"
    echo "| [2]  Clobber        |"
    echo "| [3]  Novo           |"
    echo "| [4]  Magic          |"
    echo "| [5]  Dirty          |"
    echo "| [6]  Apps           |" 
    echo "| [7]  Image          |"
    echo "| [8]  Kernel         |"
    echo "| [9]  Recovery       |"
    echo "| [10] Root           |"
    echo "| [11] Data           |"
    echo "| [12] Install        |"
    echo "| [13] CCache         |"
    echo "| [e] Exit            |"
    echo "======================="    
}
read_options(){
    local choice
    echo ""
    read -p "Enter choice:" choice
    case $choice in
        1) Clean ;;
        2) Clobber ;;
        3) Novo ;;
        4) Magic ;;
        5) Dirty ;;
        6) Apps ;;
        7) Image ;;
        8) Kernel ;;
        9) Recovery ;;
        10) Root ;;
        11) Data ;;
        12) Install ;;
        13) CCache ;;
        e) exit 0 ;;
        *) echo -e "${RED}Error...${STD}" && sleep 2
    esac
}
Clean(){
    echo "Start Fresh"
    pause
    make clean
    pause
    return
}
Clobber(){
    echo "Make Clean"
    pause
    make clobber
    pause
    return
}
Novo(){
    echo "This should be almost as good as a clobber but keeping many of the time intensive files"
    pause
    make novo
    pause
    return
}
Magic(){
    echo "This is one step better then Novo, only clearing target/product"
    pause
    make magic
    pause
    return
}
Dirty(){
    echo "Clears out zip and build.prop"
    pause
    make dirty
    pause
    return
}
Apps(){
    echo "Clears out all apks"
    pause
    make appclean
    pause
    return
}
Image(){
    echo "Clears out all .img files"
    pause
    make imagclean
    pause
    return
}
Kernel(){
    echo "Clears out all kernel stuff"
    pause
    make kernelclean
    pause
    return
}
System(){
    echo "Clears out all system stuff"
    pause
    make systemclean
    pause
    return
}
Recovery(){
    echo "Clears out all recovery stuff"
    pause
    make recoveryclean
    pause
    return
}
Root(){
    echo "Clears out all root stuff"
    pause
    make rootclean
    pause
    return
}
Data(){
    echo "Clears out all data stuff"
    pause
    make dataclean
    pause
    return
}
Install(){
    echo "Clears out all install stuff"
    pause
    make installclean
    pause
    return
}
CCache(){
    echo "Clears out all CCache"
    pause
    ccache -C
    pause
    return
}
}

# ----------------------------------------------
# Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
# trap '' SIGINT SIGQUIT SIGTSTP
 
# -----------------------------------
# Main logic - infinite loop
# ------------------------------------
while true
do
    show_menus
    read_options 
done